{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "About", "text": "<p>I am a graduate student in the Department of Statistics at the University of Chicago. </p> <p>My reserach focuses on combining machine learning and statistical models, with an emphasis on Bayesian methods. While I have past experience in deep learning, my recent work aims to apply these hybrid techniques to complex real-world problems, such as predicting political events and understanding gene perturbation effects.</p> <p>Before this, I received a Bachelor\u2019s degree in Statistics from Fudan University in 2023. And I have interned at eBay, Henkel, and Dewu Inc.</p> <p>\u201cThat the powerful play goes on, and you may contribute a verse.\u201d \u2014\u2014 O Me! O Life! , by Walt Whitman</p>"}, {"location": "projects/celloracle_pretraining/", "title": "Celloracle_pretraining", "text": "In\u00a0[\u00a0]: Copied! <pre>import sys\nimport celloracle as co\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nfrom anndata import AnnData\nfrom sklearn.decomposition import PCA\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nsys.path.append('/project/jingshuw/SeqExpDesign/')\nfrom seqpert.data_utils import DataSplitter\n</pre> import sys import celloracle as co import numpy as np import pandas as pd import scanpy as sc from anndata import AnnData from sklearn.decomposition import PCA import seaborn as sns import matplotlib.pyplot as plt   sys.path.append('/project/jingshuw/SeqExpDesign/') from seqpert.data_utils import DataSplitter In\u00a0[2]: Copied! <pre># Visualization settings\n%config InlineBackend.figure_format = 'retina'\n%matplotlib inline\n\nplt.rcParams['figure.figsize'] = [6, 4.5]\nplt.rcParams[\"savefig.dpi\"] = 300\n</pre> # Visualization settings %config InlineBackend.figure_format = 'retina' %matplotlib inline  plt.rcParams['figure.figsize'] = [6, 4.5] plt.rcParams[\"savefig.dpi\"] = 300 In\u00a0[3]: Copied! <pre>adata = sc.read_h5ad(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed.h5ad\")\nsc.pp.filter_genes(adata, min_counts=1)\nsc.pp.normalize_per_cell(adata, key_n_counts='n_counts_all')\n\n# Select top 2000 highly-variable genes\nfilter_result = sc.pp.filter_genes_dispersion(adata.X,\n                                              flavor='cell_ranger',\n                                              n_top_genes=2000,\n                                              log=False)\n\n# Subset the genes\nadata = adata[:, filter_result.gene_subset]\n\n# Renormalize after filtering\nsc.pp.normalize_per_cell(adata)\n\n# keep raw cont data before log transformation\nadata.raw = adata\nadata.layers[\"raw_count\"] = adata.raw.X.copy()\n\n# Log transformation and scaling\nsc.pp.log1p(adata)\nsc.pp.scale(adata)\n\n# PCA\nprint('PCA begins.')\nsc.tl.pca(adata, svd_solver='arpack')\nprint('PCA done.')\n\n# Diffusion map\nsc.pp.neighbors(adata, n_neighbors=4, n_pcs=20)\nsc.tl.diffmap(adata)\n\n# Calculate neihbors again based on diffusionmap\nsc.pp.neighbors(adata, n_neighbors=10, use_rep='X_diffmap')\n\nprint('louvain begins.')\nsc.tl.louvain(adata=adata)\nsc.tl.draw_graph(adata=adata)\nadata.write(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed_2.h5ad\")\n</pre> adata = sc.read_h5ad(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed.h5ad\") sc.pp.filter_genes(adata, min_counts=1) sc.pp.normalize_per_cell(adata, key_n_counts='n_counts_all')  # Select top 2000 highly-variable genes filter_result = sc.pp.filter_genes_dispersion(adata.X,                                               flavor='cell_ranger',                                               n_top_genes=2000,                                               log=False)  # Subset the genes adata = adata[:, filter_result.gene_subset]  # Renormalize after filtering sc.pp.normalize_per_cell(adata)  # keep raw cont data before log transformation adata.raw = adata adata.layers[\"raw_count\"] = adata.raw.X.copy()  # Log transformation and scaling sc.pp.log1p(adata) sc.pp.scale(adata)  # PCA print('PCA begins.') sc.tl.pca(adata, svd_solver='arpack') print('PCA done.')  # Diffusion map sc.pp.neighbors(adata, n_neighbors=4, n_pcs=20) sc.tl.diffmap(adata)  # Calculate neihbors again based on diffusionmap sc.pp.neighbors(adata, n_neighbors=10, use_rep='X_diffmap')  print('louvain begins.') sc.tl.louvain(adata=adata) sc.tl.draw_graph(adata=adata) adata.write(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed_2.h5ad\") <pre>PCA begins.\nPCA done.\nlouvain begins.\n</pre> In\u00a0[7]: Copied! <pre>adata = sc.read_h5ad(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed_train.h5ad\")\nbase_GRN = pd.read_parquet('/project/jingshuw/SeqExpDesign/data/GSE140203/base_GRN_dataframe.parquet')\nadata\n</pre> adata = sc.read_h5ad(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed_train.h5ad\") base_GRN = pd.read_parquet('/project/jingshuw/SeqExpDesign/data/GSE140203/base_GRN_dataframe.parquet') adata Out[7]: <pre>AnnData object with n_obs \u00d7 n_vars = 53928 \u00d7 1999\n    obs: 'condition', 'cell_type', 'dose_val', 'control', 'condition_name', 'n_counts_all', 'n_counts', 'louvain', 'split'\n    var: 'n_counts', 'mean', 'std', 'gene_id'\n    uns: 'diffmap_evals', 'draw_graph', 'hvg', 'log1p', 'louvain', 'neighbors', 'non_dropout_gene_idx', 'non_zeros_gene_idx', 'pca', 'rank_genes_groups_cov', 'rank_genes_groups_cov_all', 'rank_genes_groups_cov_top100', 'rank_genes_groups_cov_top200', 'rank_genes_groups_cov_top50', 'top_non_dropout_de_20', 'top_non_zero_de_20'\n    obsm: 'X_diffmap', 'X_draw_graph_fa', 'X_pca'\n    varm: 'PCs'\n    layers: 'counts', 'raw_count'\n    obsp: 'connectivities', 'distances'</pre> In\u00a0[16]: Copied! <pre>adata.var['gene_id'] = adata.var.index\nadata.var.set_index('gene_name',inplace=True)\n\ndatasplitter = DataSplitter(adata=adata)\ndatasplitter.split_data(test_size=0.2, val_size=0.1,seed=42)\n\n# Split the AnnData object based on the 'split' column in obs\nadata_train = adata[adata.obs['split'] == 'train'].copy()\nadata_test = adata[adata.obs['split'] == 'test'].copy()\nadata_val = adata[adata.obs['split'] == 'val'].copy()\n\nadata_train.write(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed_train.h5ad\")\nadata_test.write(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed_test.h5ad\")\nadata_val.write(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed_val.h5ad\")\n\n\nadata = adata_train\n\n# In this notebook, we use the unscaled mRNA count for the nput of Oracle object.\nadata.X = adata.layers[\"counts\"].copy()\n</pre> adata.var['gene_id'] = adata.var.index adata.var.set_index('gene_name',inplace=True)  datasplitter = DataSplitter(adata=adata) datasplitter.split_data(test_size=0.2, val_size=0.1,seed=42)  # Split the AnnData object based on the 'split' column in obs adata_train = adata[adata.obs['split'] == 'train'].copy() adata_test = adata[adata.obs['split'] == 'test'].copy() adata_val = adata[adata.obs['split'] == 'val'].copy()  adata_train.write(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed_train.h5ad\") adata_test.write(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed_test.h5ad\") adata_val.write(\"/project/jingshuw/SeqExpDesign/celloracle/celloracle_data/norman_umi_go/perturb_processed_val.h5ad\")   adata = adata_train  # In this notebook, we use the unscaled mRNA count for the nput of Oracle object. adata.X = adata.layers[\"counts\"].copy() <pre>... storing 'split' as categorical\n... storing 'split' as categorical\n... storing 'split' as categorical\n</pre> In\u00a0[4]: Copied! <pre>oracle = co.Oracle()\n\n\n# Instantiate Oracle object.\noracle.import_anndata_as_raw_count(adata=adata,\n                                   cluster_column_name=\"louvain\",\n                                   embedding_name=\"X_draw_graph_fa\")\n\n# You can load TF info dataframe with the following code.\noracle.import_TF_data(TF_info_matrix=base_GRN)\n</pre> oracle = co.Oracle()   # Instantiate Oracle object. oracle.import_anndata_as_raw_count(adata=adata,                                    cluster_column_name=\"louvain\",                                    embedding_name=\"X_draw_graph_fa\")  # You can load TF info dataframe with the following code. oracle.import_TF_data(TF_info_matrix=base_GRN) In\u00a0[\u00a0]: Copied! <pre># Perform PCA\noracle.perform_PCA()\n\n# Save oracle object.\noracle.to_hdf5(\"/project/jingshuw/SeqExpDesign/celloracle/models/Norman_data.celloracle.oracle\")\n\nprint('PCA done.')\n\n# Load file.\noracle = co.load_hdf5(\"/project/jingshuw/SeqExpDesign/celloracle/models/Norman_data.celloracle.oracle\")\n\n# Select important PCs\nn_comps = np.where(np.diff(np.diff(np.cumsum(oracle.pca.explained_variance_ratio_))&gt;0.002))[0][0]\nprint(n_comps)\nn_comps = min(n_comps, 50)\nn_comps = 1\n\n# Set number of neighbors for KNN imputation\nn_cell = oracle.adata.shape[0]\nk = int(0.025 * n_cell)\n\n# Perform KNN imputation\noracle.knn_imputation(n_pca_dims=n_comps, k=k, balanced=True, b_sight=k*8, b_maxl=k*4, n_jobs=4)\n\n# Save oracle object.\noracle.to_hdf5(\"/project/jingshuw/SeqExpDesign/celloracle/models/Norman_data.celloracle.oracle\")\n# Load file.\noracle = co.load_hdf5(\"/project/jingshuw/SeqExpDesign/celloracle/models/Norman_data.celloracle.oracle\")\n\nprint('KNN done.')\n</pre> # Perform PCA oracle.perform_PCA()  # Save oracle object. oracle.to_hdf5(\"/project/jingshuw/SeqExpDesign/celloracle/models/Norman_data.celloracle.oracle\")  print('PCA done.')  # Load file. oracle = co.load_hdf5(\"/project/jingshuw/SeqExpDesign/celloracle/models/Norman_data.celloracle.oracle\")  # Select important PCs n_comps = np.where(np.diff(np.diff(np.cumsum(oracle.pca.explained_variance_ratio_))&gt;0.002))[0][0] print(n_comps) n_comps = min(n_comps, 50) n_comps = 1  # Set number of neighbors for KNN imputation n_cell = oracle.adata.shape[0] k = int(0.025 * n_cell)  # Perform KNN imputation oracle.knn_imputation(n_pca_dims=n_comps, k=k, balanced=True, b_sight=k*8, b_maxl=k*4, n_jobs=4)  # Save oracle object. oracle.to_hdf5(\"/project/jingshuw/SeqExpDesign/celloracle/models/Norman_data.celloracle.oracle\") # Load file. oracle = co.load_hdf5(\"/project/jingshuw/SeqExpDesign/celloracle/models/Norman_data.celloracle.oracle\")  print('KNN done.') <pre>15\n</pre> In\u00a0[\u00a0]: Copied! <pre># Calculate GRN links\nlinks = oracle.get_links(cluster_name_for_GRN_unit=\"louvain\", alpha=10, verbose_level=10)\nlinks.filter_links()\n\n# Update Oracle with cluster-specific TF dictionary\noracle.get_cluster_specific_TFdict_from_Links(links_object=links)\noracle.fit_GRN_for_simulation(alpha=10, use_cluster_specific_TFdict=True)\n</pre> # Calculate GRN links links = oracle.get_links(cluster_name_for_GRN_unit=\"louvain\", alpha=10, verbose_level=10) links.filter_links()  # Update Oracle with cluster-specific TF dictionary oracle.get_cluster_specific_TFdict_from_Links(links_object=links) oracle.fit_GRN_for_simulation(alpha=10, use_cluster_specific_TFdict=True) In\u00a0[7]: Copied! <pre># Save oracle object.\noracle.to_hdf5(\"/project/jingshuw/SeqExpDesign/celloracle/models/Norman_data_done.celloracle.oracle\")\n</pre> # Save oracle object. oracle.to_hdf5(\"/project/jingshuw/SeqExpDesign/celloracle/models/Norman_data_done.celloracle.oracle\")"}, {"location": "projects/cvae/", "title": "CVAE-based Probabilistic Tensor Factorization", "text": "<p>Hello!</p>"}]}